// Alphabet - russian
let symbols = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 
'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', ' ', '.', ',', '—', '!'];

// Offset
let shift = 10;

// Encoded message
let encodedSymbols = [8, 28, 36, 52, 56, 40, 23, 31, 56, 39, 38, 28, 48, 52, 58, 56, 38, 27, 32, 37, 56, 40, 23, 31, 56, 39, 38, 41, 39, 32, 57];

// Decoded message
let decodedMessage = '';


/* 
There is an array symbols, which stores the alphabet (letters and other symbols).

There is an encodedSymbols array that stores the encrypted message. Each element of this array is the index of a symbol from the symbols array.

The indexes are shifted by the amount in the shift variable. Example: an element from an encrypted array is equal to one, which means, 
taking into account the shift ten, this is the character with index eleven in the array with the alphabet, that is, "K".

The decryption program must convert elements from the encrypted array into characters from the alphabet array and glue the decrypted string from them. 
We store this string in the decodedMessage variable.

If the offset index is outside the alphabet, then you need to subtract the length of the alphabet from this index 
(large indexes encrypt characters at the beginning of the alphabet).
*/

let key;

for (let i = 0; i < encodedSymbols.length; i++) {
  // Index entry with offset
  key = encodedSymbols[i] + shift;
  if (key > symbols.length) {
    key -= symbols.length;
  }
  decodedMessage += symbols[key];
}

/*
Values to check

[4,28,31,25,23,37,51,33,56,39,51,35,28,41,38,41,56,45,43,30,28,56,25,28,37,32,34,23,57]

[2,43,47,48,28,56,34,38,42,35,28,42,23,56,25,56,31,43,24,23,45,58,56,47,28,36,56,41,32,37,32,46,23,56,25,56,37,28,24,28,57]

[13,25,28,42,38,34,56,37,23,56,39,38,35,56,59,56,39,38,27,38,34,38,37,37,32,34,43,56,35,28,26,47,28,60]

[62,28,31,56,42,40,43,27,23,56,37,28,56,25,51,39,40,38,41,32,48,52,56,40,51,24,34,43,56,43,56,45,38,31,55,32,37,23,57]

[8,34,38,35,52,34,38,56,39,41,23,56,37,28,56,34,38,40,36,32,58,56,38,37,56,25,41,29,56,40,23,25,37,38,56,25,56,36,38,54,56,36,32,41,34,43,56,41,36,38,42,40,32,42,60]

*/
